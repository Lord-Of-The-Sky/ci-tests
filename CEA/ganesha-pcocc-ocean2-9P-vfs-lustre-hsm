#!/bin/bash -xe

set -o pipefail

if [[ -n "$GERRIT_REFSPEC" ]]; then
  GERRIT_REF="$GERRIT_REFSPEC"
  REVISION="$GERRIT_PATCHSET_REVISION"
  GERRIT_PUBLISH=true
  CHECKPATCH=false
fi

SSH_GERRIT="ssh -p 29418 cea-gerrithub-hpc@review.gerrithub.io"
cleanup() {
  pcocc ssh -j $PCOCC_ID vm0 -- sudo poweroff || true
  pcocc ssh -j $PCOCC_ID vm1 -- sudo poweroff || true
  rm -rf $HOME/.pcocc/job_$PCOCC_ID
  if [[ "$VERF" != "-1" ]]; then
    exit 0
  else
    exit 1
  fi
}

gerrit_publish() {
  NOTIFY="ALL"
  [[ "$VERF" != "-1" ]] && NOTIFY="NONE"

  if [[ "$GERRIT_PUBLISH" == "true" ]]; then
    echo '{"message": "OCEAN 2 9P access over IB to a VFS FSAL export of a local HSM Lustre : '"$MESSAGE"'", "labels": { "Verified": '"$VERF"' }, "notify": '"$NOTIFY"' }' | \
      $SSH_GERRIT "gerrit review --json --project ffilz/nfs-ganesha $REVISION"
  else
    echo "echo '{\"message\": \"$MESSAGE\", \"labels\": { \"Verified\": \"$VERF\" }, \"notify\": \"$NOTIFY\" }' | \\
      $SSH_GERRIT \\
        \"gerrit review --json --project ffilz/nfs-ganesha $REVISION\""
  fi

  cleanup
}

# make test_report current. keep old one because jenkins doesn't like if there's none...
touch test_report.xml

###############
# Fetch sources
###############
if ! [ -d nfs-ganesha/.git ]; then
  git clone ssh://cea-gerrithub-hpc@review.gerrithub.io:29418/ffilz/nfs-ganesha.git
else
 ( cd nfs-ganesha/src/libntirpc && git fetch --all )
fi

( cd nfs-ganesha && git fetch origin $GERRIT_REF )

if ! [ -d nfs-ganesha/src/libntirpc/.git ]; then
  ( cd nfs-ganesha/src && rm -rf libntirpc && git clone git://github.com/nfs-ganesha/ntirpc.git libntirpc )
else
  ( cd nfs-ganesha/src/libntirpc && git fetch --all )
fi

( cd nfs-ganesha && git checkout $REVISION && git submodule update --init )

# skip commits with WIP/RFC
if GIT_DIR=nfs-ganesha/.git git show --format=oneline --quiet | grep -qE "WIP|^RFC"; then
  exit 0
fi

rm -f pcocc_*.{err,out} server_logs mount_logs test_logs

#####################
#LAUNCH PCOCC VM
#####################
PCOCC_ID=$(pcocc batch -w $(hostname -s) -c 4 ganesha-ocean2:2 | awk '{print $NF}')

PCOCC_FILE=/tmp/.pcocc_${PCOCC_ID}_vm_0

while ! [[ -e $PCOCC_FILE ]]; do
  sleep 1
done

#####################
#Test with ssh if the pcocc vm is successfully started
#####################
# VM sometimes refuse first ssh, try twice:
pcocc ssh -j $PCOCC_ID -o ConnectTimeout=600 vm0 -- "echo VM started" || { sleep 10; pcocc ssh -j $PCOCC_ID -o ConnectTimeout=600 vm0 -- "echo VM started"; }

#####################
#Copy ganesha source through a 9P mount from jenkins workspace to /export device
#####################
pcocc ssh -j $PCOCC_ID vm0 -- "sudo mount -t 9p -o trans=virtio workspace /mnt/workspace && cp -a /mnt/workspace/nfs-ganesha /export/nfs-ganesha && mkdir /export/nfs-ganesha/build"

#####################
#TRY CONFIG GANESHA ON vm0
#####################
if ! pcocc ssh -j $PCOCC_ID vm0 -- "cd /export/nfs-ganesha/build && cmake /export/nfs-ganesha/src/ -DBUILD_CONFIG=everything -DLUSTRE_PREFIX=/opt/lustre/usr -DUSE_9P_RDMA=ON"; then
    VERF="-1"
    MESSAGE="Cmake failed:"$'\n'$(pcocc ssh -j $PCOCC_ID vm0 -- "cd /export/nfs-ganesha/build && cmake /export/nfs-ganesha/src/ -DBUILD_CONFIG=everything -DLUSTRE_PREFIX=/opt/lustre/usr 2>&1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' || true)
    gerrit_publish
fi

#####################
#TRY BUILD GANESHA ON vm0
#####################
if ! pcocc ssh -j $PCOCC_ID vm0 "cd /export/nfs-ganesha/build && make -j8"; then
    VERF="-1"
    MESSAGE="Build failed:"$'\n'$(pcocc ssh -j $PCOCC_ID vm0 -- "cd /export/nfs-ganesha/build && make 2>&1 >/dev/null" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' || true)
    gerrit_publish
fi

#####################
#Start Lustre on vm0
#####################
pcocc ssh -j $PCOCC_ID vm0 -- "sudo MGSNID=10.251.0.1@o2ib /usr/lib64/lustre/tests/llmount.sh"


#####################
#Start HSM on Lustre on vm0
#####################
pcocc ssh -j $PCOCC_ID vm0 -- "sudo chmod og+x /mnt/lustre/.lustre/fid"
pcocc ssh -j $PCOCC_ID vm0 -- "sudo bash -c \"echo enabled > /proc/fs/lustre/mdt/lustre-MDT0000/hsm_control\""
pcocc ssh -j $PCOCC_ID vm0 -- "sudo bash -c \"echo \\\"RESTORE ARCHIVE\\\" > /proc/fs/lustre/mdt/lustre-MDT0000/hsm/user_request_mask\""
pcocc ssh -j $PCOCC_ID vm0 -- "sudo mkdir -p /tmp/hsm_backend"
pcocc ssh -j $PCOCC_ID vm0 sudo lhsmtool_posix --hsm_root=/tmp/hsm_backend --no-shadow --daemon /mnt/lustre 2>&1 | tee lhsm_logs &



#####################
#LAUNCH GANESHA SERVER ON vm0
#####################
timeout 30m pcocc ssh -j $PCOCC_ID vm0 sudo gdb --batch --ex r --ex bt --args /export/nfs-ganesha/build/MainNFSD/ganesha.nfsd -L STDOUT -F -f /opt/ganesha.conf  2>&1 | tee server_logs&
SERVER=$!

#####################
#9P mount on /mnt/sigmund on vm1
#####################
#Waiting a 9p client updated (backported patchs), we mount without cache=mmap
#Due to our old "9p" client, we must set version=9p2000.L
if ! pcocc ssh -j $PCOCC_ID vm1 "sleep 5; sudo mount -v -t 9p -o aname=/mnt/lustre,privport=1,posixacl,msize=1048576,trans=tcp,version=9p2000.L 10.251.0.1 /mnt/sigmund" | tee mount_logs; then
    VERF="0"
    MESSAGE="Build OK - 9p mount failed\n\nmount:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' mount_logs)\nserver:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' server_logs)"
    gerrit_publish
fi

#####################
#SIGMUND TEST on vm1
#####################
timeout 30m pcocc ssh -j $PCOCC_ID vm1 -- sudo /opt/sigmund/sigmund.sh 9p_plus_pynfs -j -q -s $SIGMUND_SPEED 2>&1 | tee test_logs || true


#####################
#umount on vm0 and stop server on vm1
#####################
pcocc ssh -j $PCOCC_ID vm1 -- sudo umount /mnt/sigmund || true
pcocc ssh -j $PCOCC_ID vm0 -- sudo pkill ganesha.nfsd || true

if ! wait $SERVER || ! grep -q "exited normally" server_logs; then
  VERF="-1"
  MESSAGE="Build OK - server crashed/hang:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' server_logs)\ntest logs:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' test_logs)"
  gerrit_publish
fi

#####################
#stop hsm and lustre on vm0
#####################
pcocc ssh -j $PCOCC_ID vm0 -- sudo pkill lhsmtool_posix || true
pcocc ssh -j $PCOCC_ID vm0 -- sudo /usr/lib64/lustre/tests/llmountcleanup.sh || true

#####################
#get back test_report.xml from vm1
#####################
if ! pcocc scp -j $PCOCC_ID -- vm1:/tmp/test_report.xml .; then
  VERF="-1"
  MESSAGE="Build OK - tests didn't finish?\nserver logs:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' server_logs)\ntest logs:\n$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' test_logs)"
  gerrit_publish
fi

#####################
#analyse and report result
#####################
TEST_TOTAL=$(grep -c '<testcase' test_report.xml) || true
TEST_SKIPPED=$(grep -c '<skipped' test_report.xml) || true
TEST_TOTAL=$((TEST_TOTAL-TEST_SKIPPED))
TEST_FAILED=$(grep -c '<failure' test_report.xml) || true
if [[ "$TEST_FAILED" == "0" ]]; then
  VERF="1"
  MESSAGE="Build OK - tests OK ($TEST_TOTAL)"
else
  FAILURES=$(grep -B1 '<failure' test_report.xml | sed -ne 's/.*name="\([^"]*\)".*/\1/p' || true)
  VERF="0"
  MESSAGE="Build OK - tests failures ($TEST_FAILED/$TEST_TOTAL failed):"$'\n'"$FAILURES"$'\n'"server log:"$'\n'"$(sed -e 's/\\/\\\\/g' -e 's/\"/\\\"/g' server_logs)"
fi

gerrit_publish
